// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MisLibros.Data;

#nullable disable

namespace MisLibros.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EscritorGenero", b =>
                {
                    b.Property<int>("EscritoresId")
                        .HasColumnType("int");

                    b.Property<int>("GenerosId")
                        .HasColumnType("int");

                    b.HasKey("EscritoresId", "GenerosId");

                    b.HasIndex("GenerosId");

                    b.ToTable("EscritorGenero");
                });

            modelBuilder.Entity("EscritorLibro", b =>
                {
                    b.Property<int>("EscritoresId")
                        .HasColumnType("int");

                    b.Property<int>("LibrosId")
                        .HasColumnType("int");

                    b.HasKey("EscritoresId", "LibrosId");

                    b.HasIndex("LibrosId");

                    b.ToTable("EscritorLibro");
                });

            modelBuilder.Entity("GeneroLibro", b =>
                {
                    b.Property<int>("GenerosId")
                        .HasColumnType("int");

                    b.Property<int>("LibrosId")
                        .HasColumnType("int");

                    b.HasKey("GenerosId", "LibrosId");

                    b.HasIndex("LibrosId");

                    b.ToTable("GeneroLibro");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Apunte", b =>
                {
                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLibro", "Titulo");

                    b.ToTable("Apuntes");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Articulo", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<string>("TituloApunte")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUsuario", "IdLibro", "TituloApunte");

                    b.HasIndex("IdLibro", "TituloApunte");

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Biblioteca", b =>
                {
                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<int>("IdEditorial")
                        .HasColumnType("int");

                    b.Property<int>("CantidadPaginas")
                        .HasColumnType("int");

                    b.HasKey("IdLibro", "IdEditorial");

                    b.HasIndex("IdEditorial");

                    b.ToTable("Bibliotecas");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdEditorial")
                        .HasColumnType("int");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<int>("Importancia")
                        .HasColumnType("int");

                    b.Property<int?>("Pagina")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLibro", "IdEditorial");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.CitaArticulo", b =>
                {
                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("ArticuloIdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ArticuloIdLibro")
                        .HasColumnType("int");

                    b.Property<string>("ArticuloTituloApunte")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CitaId", "ArticuloIdUsuario", "ArticuloIdLibro", "ArticuloTituloApunte");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("CitaId", "ArticuloIdUsuario", "ArticuloIdLibro", "ArticuloTituloApunte"), false);

                    b.HasIndex("ArticuloIdUsuario", "ArticuloIdLibro", "ArticuloTituloApunte");

                    b.ToTable("CitaArticulo");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.ComentarioArticulo", b =>
                {
                    b.Property<string>("IdUsuarioComentario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuarioArticulo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<string>("TituloApunte")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUsuarioComentario", "IdUsuarioArticulo", "IdLibro", "TituloApunte");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdUsuarioComentario", "IdUsuarioArticulo", "IdLibro", "TituloApunte"), false);

                    b.HasIndex("IdUsuarioArticulo", "IdLibro", "TituloApunte");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Editorial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Editoriales");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Escritor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("FechaMuerte")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("ImgAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlBiografia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Escritores");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Lectura", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<int>("IdEditorial")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<int?>("Puntaje")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario", "IdLibro", "IdEditorial");

                    b.HasIndex("IdLibro", "IdEditorial");

                    b.ToTable("Lecturas");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_portada")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Like", b =>
                {
                    b.Property<string>("IdUsuarioComentario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdUsuarioArticulo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdLibro")
                        .HasColumnType("int");

                    b.Property<string>("TituloApunte")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUsuarioComentario", "IdUsuarioArticulo", "IdLibro", "TituloApunte");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdUsuarioComentario", "IdUsuarioArticulo", "IdLibro", "TituloApunte"), false);

                    b.HasIndex("IdUsuarioArticulo", "IdLibro", "TituloApunte");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EscritorGenero", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Escritor", null)
                        .WithMany()
                        .HasForeignKey("EscritoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Genero", null)
                        .WithMany()
                        .HasForeignKey("GenerosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EscritorLibro", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Escritor", null)
                        .WithMany()
                        .HasForeignKey("EscritoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Libro", null)
                        .WithMany()
                        .HasForeignKey("LibrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneroLibro", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Genero", null)
                        .WithMany()
                        .HasForeignKey("GenerosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Libro", null)
                        .WithMany()
                        .HasForeignKey("LibrosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Apunte", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Libro", "Libro")
                        .WithMany("Apuntes")
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Articulo", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", "Usuario")
                        .WithMany("Articulos")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Apunte", "Apunte")
                        .WithMany("Articulos")
                        .HasForeignKey("IdLibro", "TituloApunte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apunte");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Biblioteca", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Editorial", "Editorial")
                        .WithMany("Biblioteca")
                        .HasForeignKey("IdEditorial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Libro", "Libro")
                        .WithMany("Biblioteca")
                        .HasForeignKey("IdLibro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editorial");

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Cita", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Biblioteca", "Biblioteca")
                        .WithMany("Citas")
                        .HasForeignKey("IdLibro", "IdEditorial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteca");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.CitaArticulo", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Cita", "Cita")
                        .WithMany("CitaArticulos")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Articulo", "Articulo")
                        .WithMany("CitaArticulos")
                        .HasForeignKey("ArticuloIdUsuario", "ArticuloIdLibro", "ArticuloTituloApunte")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.ComentarioArticulo", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdUsuarioComentario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Articulo", "Articulo")
                        .WithMany("Comentarios")
                        .HasForeignKey("IdUsuarioArticulo", "IdLibro", "TituloApunte")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Lectura", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", "Usuario")
                        .WithMany("Lecturas")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Biblioteca", "Biblioteca")
                        .WithMany("Lecturas")
                        .HasForeignKey("IdLibro", "IdEditorial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biblioteca");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Like", b =>
                {
                    b.HasOne("MisLibros.Models.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuarioComentario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MisLibros.Models.Entities.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdUsuarioArticulo", "IdLibro", "TituloApunte")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Apunte", b =>
                {
                    b.Navigation("Articulos");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Articulo", b =>
                {
                    b.Navigation("CitaArticulos");

                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Biblioteca", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Lecturas");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Cita", b =>
                {
                    b.Navigation("CitaArticulos");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Editorial", b =>
                {
                    b.Navigation("Biblioteca");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Libro", b =>
                {
                    b.Navigation("Apuntes");

                    b.Navigation("Biblioteca");
                });

            modelBuilder.Entity("MisLibros.Models.Entities.Usuario", b =>
                {
                    b.Navigation("Articulos");

                    b.Navigation("Comentarios");

                    b.Navigation("Lecturas");
                });
#pragma warning restore 612, 618
        }
    }
}
